plugins {
	id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

loom {
	accessWidener = file("src/main/resources/origins.accessWidener")
	mixinConfigs = ["origins.mixins.json", "origins.mixins.fabric.json"]
}

architectury {
	platformSetupLoomIde()
	fabric()
}

repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.terraformersmc.com/' }
}

dependencies {
	minecraft("com.mojang:minecraft:${rootProject.architectury.minecraft}")
	mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
	// Remove the next line if you don't want to depend on the API
	modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

	implementation(project(path: ":common")) {
		transitive = false
	}
	developmentFabric(project(path: ":common")) {
		transitive = false
	}
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
		transitive = false
	}


	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${rootProject.cca_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${rootProject.cca_version}"

	modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${rootProject.cca_version}"
	include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${rootProject.cca_version}"

	modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${rootProject.reach_version}"
	include "com.jamieswhiteshirt:reach-entity-attributes:${rootProject.reach_version}"

	modImplementation "com.github.adriantodt:FallFlyingLib:${rootProject.ffl_version}"
	include "com.github.adriantodt:FallFlyingLib:${rootProject.ffl_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.clothconfig_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:cloth-config-fabric:${rootProject.clothconfig_version}"

	modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	classifier "fabric"
}

jar {
	classifier "dev"
}

java {
	withSourcesJar()
}

sourcesJar {
	def commonSources = project(":common").remapSourcesJar
	dependsOn commonSources
	from zipTree(commonSources.output)
}

publishing {
	publications {
		mavenFabric(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				classifier null
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}